{"version":3,"file":"annotations.umd.js","sources":["../../annotations/src/aspect/aspect.annotation.ts","../../annotations/src/order.annotation.ts"],"sourcesContent":["import { isString, setAspectOptions, AspectOptions } from '@aspectjs/core/utils';\nimport { AnnotationRef, ASPECTJS_ANNOTATION_FACTORY } from '@aspectjs/core/commons';\n\n// TODO remove when https://github.com/microsoft/rushstack/issues/1050 is resolved\nAnnotationRef;\n\nlet _globalAspectId = 0;\n\n/**\n * @public\n */\nexport const Aspect = ASPECTJS_ANNOTATION_FACTORY.create(function Aspect(\n    id: string | AspectOptions = {},\n): ClassDecorator {\n    return function (target: Function) {\n        const options = isString(id) ? { id: id } : (id as AspectOptions) ?? {};\n\n        if (options.id === undefined) {\n            options.id = `AnonymousAspect#${_globalAspectId++}`;\n        } else if (!isString(options.id)) {\n            throw new TypeError(`Aspect ${target.name} should have a string id. Got: ${options.id}`);\n        }\n\n        setAspectOptions(target, options);\n    };\n});\n","import { ASPECTJS_ANNOTATION_FACTORY, AnnotationRef, Decorator } from '@aspectjs/core/commons';\n\n// TODO remove when https://github.com/microsoft/rushstack/issues/1050 is resolved\nAnnotationRef;\n\n/**\n * @public\n */\nexport const OrderAnnotation = ASPECTJS_ANNOTATION_FACTORY.create(function Order(order: number): Decorator {\n    return;\n});\n\nObject.defineProperties(OrderAnnotation, {\n    LOWEST_PRECEDENCE: {\n        writable: false,\n        value: Infinity,\n    },\n    HIGHEST_PRECEDENCE: {\n        writable: false,\n        value: -Infinity,\n    },\n});\n/**\n * @public\n */\nexport type OrderType = typeof OrderAnnotation & {\n    LOWEST_PRECEDENCE: number;\n    HIGHEST_PRECEDENCE: number;\n};\n\n/**\n * @public\n */\nexport const Order = OrderAnnotation as OrderType;\n"],"names":[],"mappings":";;;;;;;IAWA;;;;oDAIiD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICG1C,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;"}