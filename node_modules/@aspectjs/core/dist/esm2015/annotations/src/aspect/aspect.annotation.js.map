{"version":3,"file":"aspect.annotation.js","sources":["../../../../../annotations/src/aspect/aspect.annotation.ts"],"sourcesContent":["import { isString, setAspectOptions, AspectOptions } from '@aspectjs/core/utils';\nimport { AnnotationRef, ASPECTJS_ANNOTATION_FACTORY } from '@aspectjs/core/commons';\n\n// TODO remove when https://github.com/microsoft/rushstack/issues/1050 is resolved\nAnnotationRef;\n\nlet _globalAspectId = 0;\n\n/**\n * @public\n */\nexport const Aspect = ASPECTJS_ANNOTATION_FACTORY.create(function Aspect(\n    id: string | AspectOptions = {},\n): ClassDecorator {\n    return function (target: Function) {\n        const options = isString(id) ? { id: id } : (id as AspectOptions) ?? {};\n\n        if (options.id === undefined) {\n            options.id = `AnonymousAspect#${_globalAspectId++}`;\n        } else if (!isString(options.id)) {\n            throw new TypeError(`Aspect ${target.name} should have a string id. Got: ${options.id}`);\n        }\n\n        setAspectOptions(target, options);\n    };\n});\n"],"names":[],"mappings":";;;AAMA,IAAI,eAAe,GAAG,CAAC,CAAC;AAExB;;;MAGa,MAAM,GAAG,2BAA2B,CAAC,MAAM,CAAC,SAAS,MAAM,CACpE,KAA6B,EAAE;IAE/B,OAAO,UAAU,MAAgB;;QAC7B,MAAM,OAAO,GAAG,QAAQ,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,SAAI,EAAoB,mCAAI,EAAE,CAAC;QAExE,IAAI,OAAO,CAAC,EAAE,KAAK,SAAS,EAAE;YAC1B,OAAO,CAAC,EAAE,GAAG,mBAAmB,eAAe,EAAE,EAAE,CAAC;SACvD;aAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;YAC9B,MAAM,IAAI,SAAS,CAAC,UAAU,MAAM,CAAC,IAAI,kCAAkC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;SAC5F;QAED,gBAAgB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;KACrC,CAAC;AACN,CAAC;;;;"}