{"version":3,"file":"aspect.registry.impl.js","sources":["../../../../src/aspect/aspect.registry.impl.ts"],"sourcesContent":["import { After, AfterReturn, AfterThrow, Around, Before, Compile, Order } from '@aspectjs/core/annotations';\nimport {\n    _AdviceFactory,\n    _getWeaverContext,\n    Advice,\n    AdvicesFilter,\n    AdvicesRegistry,\n    AdviceTarget,\n    AdviceType,\n    AnnotationContext,\n    AnnotationLocationFactory,\n    AspectsRegistry,\n    AspectType,\n    Pointcut,\n    PointcutExpression,\n    PointcutPhase,\n    WeaverContext,\n} from '@aspectjs/core/commons';\nimport { assert, assertIsAspect, locator } from '@aspectjs/core/utils';\n\n/**\n * Stores the aspects along with their advices.\n * @public\n */\nexport class AspectsRegistryImpl implements AspectsRegistry {\n    private readonly _advicesRegistryKey: string;\n    private _advicesRegistry: AdvicesRegistry = {\n        byPointcut: {},\n        byTarget: {},\n        byAspect: {},\n    };\n    private _dirty = true;\n    private readonly _aspectsToLoad: Set<AspectType> = new Set<AspectType>();\n    private readonly _loadedAspects: Set<AspectType> = new Set<AspectType>();\n\n    constructor(private _weaverContext: WeaverContext) {\n        this._advicesRegistryKey = `aspectjs.adviceRegistry.byAspects`; // TODO increment key with AspectsRegistry instance ?\n    }\n\n    /**\n     * Register a new advice, with the aspect it belongs to.\n     * @param aspects - The aspects to register\n     */\n    register(...aspects: AspectType[]): void {\n        (aspects ?? []).forEach((aspect) => {\n            // get annotations bundle\n            const annotationsContext = _getWeaverContext().annotations;\n            const bundle = annotationsContext.bundle.at(annotationsContext.location.of(aspect));\n\n            // get @Aspect options\n            const target = this._getTarget(aspect);\n\n            const byAspectRegistry = locator(this._advicesRegistry.byAspect)\n                .at(target.ref)\n                .orElseCompute(() => ({}));\n\n            this._aspectsToLoad.add(aspect);\n            [\n                [Compile, PointcutPhase.COMPILE],\n                [Before, PointcutPhase.BEFORE],\n                [Around, PointcutPhase.AROUND],\n                [After, PointcutPhase.AFTER],\n                [AfterReturn, PointcutPhase.AFTERRETURN],\n                [AfterThrow, PointcutPhase.AFTERTHROW],\n            ].forEach((adviceDef) => {\n                bundle.onMethod(adviceDef[0]).forEach((annotation) => {\n                    const expr = annotation.args[0] as PointcutExpression;\n                    assert(!!expr);\n\n                    const advice = _AdviceFactory.create(\n                        Pointcut.of(adviceDef[1] as PointcutPhase, expr),\n                        annotation.target,\n                    );\n                    const k = `${advice.pointcut.ref}=>${advice.name}`;\n                    byAspectRegistry[k] = advice;\n                });\n            });\n        });\n    }\n\n    remove(...aspects: AspectType[]): void {\n        this._dirty = true;\n        if (this._aspectsToLoad.size) {\n            aspects.forEach((a) => {\n                // remove aspect from the list of aspects to load\n                this._aspectsToLoad.delete(a);\n\n                // remove aspect from registry\n                delete this._advicesRegistry.byAspect[this._getTarget(a).ref];\n            });\n        }\n\n        // force all aspects to reload\n        this._loadedAspects.forEach((a) => this._aspectsToLoad.add(a));\n        this._loadedAspects.clear();\n    }\n\n    /**\n     * Get all advices that belongs to the given aspect\n     * @param aspect - the aspect to get advices for.\n     */\n    getAdvicesByAspect(aspect: AspectType): Advice[] {\n        assertIsAspect(aspect);\n        const target = this._getTarget(aspect);\n\n        return Object.values(this._advicesRegistry.byAspect[target.ref] ?? {})\n            .flat()\n            .map((advice) => {\n                const bound = advice.bind(aspect);\n                Object.defineProperties(bound, Object.getOwnPropertyDescriptors(advice));\n                return bound as Advice;\n            });\n    }\n\n    getAdvicesByTarget<T, A extends AdviceType, P extends PointcutPhase>(\n        target: AdviceTarget<T, A>,\n        filter?: AdvicesFilter,\n        ...phases: PointcutPhase[]\n    ): AdvicesRegistry['byTarget'][string] {\n        this._load();\n\n        const targetRegistry = locator(this._advicesRegistry)\n            .at('byTarget')\n            .at(`${target.ref}${filter?.name ? `:${filter?.name}` : ''}`)\n            .orElseGet(() => ({}));\n\n        // get all advices that correspond to all the annotations of this context\n        const bundle = this._weaverContext.annotations.bundle.at(target.location);\n        const annotationContexts: readonly AnnotationContext[] = bundle.onSelf();\n\n        (phases ?? []).forEach((phase) => {\n            if (!targetRegistry[phase]) {\n                let advices = annotationContexts\n                    .map((annotationContext) =>\n                        locator(this._advicesRegistry)\n                            .at('byPointcut')\n                            .at(phase)\n                            .at(target.type)\n                            .at('byAnnotation')\n                            .at(annotationContext.ref)\n                            .orElseGet(() => [] as any),\n                    )\n                    .flat()\n                    .sort((a1: Advice, a2: Advice) => {\n                        // sort by advice order\n                        const a = this._weaverContext.annotations;\n                        const o1 = a.bundle.at(a.location.of(a1.aspect as any)[a1.name]).onMethod(Order)[0]?.args[0];\n                        const o2 = a.bundle.at(a.location.of(a2.aspect as any)[a1.name]).onMethod(Order)[0]?.args[0];\n\n                        return _compareOrder(o1, o2);\n                    });\n\n                if (filter) {\n                    advices = advices.filter(filter.fn);\n                }\n                (targetRegistry as any)[phase] = advices;\n            }\n        });\n        return targetRegistry;\n    }\n    /**\n     * @internal\n     */\n    private _getTarget<T>(obj: T): AdviceTarget<T> {\n        return AnnotationLocationFactory.getTarget(this._weaverContext.annotations.location.of(obj));\n    }\n\n    /**\n     * Sort the aspects according to their precedence & store by target, by phase & type\n     * @private\n     */\n    private _load() {\n        if (this._dirty) {\n            this._advicesRegistry.byPointcut = {};\n            this._advicesRegistry.byTarget = {};\n        }\n        if (!this._aspectsToLoad.size) {\n            return;\n        }\n\n        [...this._aspectsToLoad]\n            .sort((a1: any, a2: any) => {\n                // sort by aspect order\n                const a = this._weaverContext.annotations;\n                const o1 = a.bundle.at(a.location.of(a1)).onClass(Order)[0]?.args[0];\n                const o2 = a.bundle.at(a.location.of(a2)).onClass(Order)[0]?.args[0];\n\n                return _compareOrder(o1, o2);\n            })\n            .map((a) => {\n                this._loadedAspects.add(a);\n                return a;\n            })\n            .map((aspect: AspectType) => this.getAdvicesByAspect(aspect))\n            .flat()\n            .forEach((advice: Advice) => {\n                const pc = advice.pointcut;\n                locator(this._advicesRegistry)\n                    .at('byPointcut')\n                    .at(pc.phase)\n                    .at(pc.type)\n                    .at('byAnnotation')\n                    .at(pc.annotation.ref)\n                    .orElseCompute(() => [])\n                    .push(advice);\n            });\n        this._dirty = false;\n        this._aspectsToLoad.clear();\n    }\n}\n\nfunction _compareOrder(o1: any, o2: any) {\n    if (o1 === Order.LOWEST_PRECEDENCE || o1 === undefined) {\n        return 1;\n    }\n\n    if (o2 === Order.LOWEST_PRECEDENCE || o2 === undefined) {\n        return -1;\n    }\n\n    if (o1 === Order.HIGHEST_PRECEDENCE) {\n        return -1;\n    }\n\n    if (o2 === Order.HIGHEST_PRECEDENCE) {\n        return 1;\n    }\n    return o1 - o2;\n}\n"],"names":[],"mappings":"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"}