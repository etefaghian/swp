{"version":3,"file":"class-weaving-strategy.js","sources":["../../../../../../src/weaver/jit/strategies/class-weaving-strategy.ts"],"sourcesContent":["import {\n    _JoinpointFactory,\n    AdviceContext,\n    AdviceType,\n    AfterReturnAdvice,\n    AfterThrowAdvice,\n    AroundAdvice,\n    AroundContext,\n    CompileAdvice,\n    JoinPoint,\n    MutableAdviceContext,\n} from '@aspectjs/core/commons';\nimport { _getReferenceConstructor, _setReferenceConstructor, assert, isUndefined, Mutable } from '@aspectjs/core/utils';\nimport { _defineFunctionProperties } from '../../utils';\nimport { _GenericWeavingStrategy } from './generic-weaving-strategy';\n\n/**\n * @internal\n */\nexport class _ClassWeavingStrategy<T> extends _GenericWeavingStrategy<T, AdviceType.CLASS> {\n    private originalInstance: T;\n\n    compile(\n        ctxt: MutableAdviceContext<T, AdviceType.CLASS>,\n        advices: CompileAdvice<T, AdviceType.CLASS>[],\n    ): AdviceType.CLASS extends AdviceType.CLASS ? { new (...args: any[]): T } : PropertyDescriptor {\n        // if another @Compile advice has been applied\n        // replace wrapped ctor by original ctor before it gets wrapped again\n        ctxt.target.proto.constructor = _getReferenceConstructor(ctxt.target.proto);\n        _setReferenceConstructor(ctxt.target.proto, ctxt.target.proto.constructor);\n\n        let ctor: new (...args: any[]) => T;\n        advices.forEach((advice: CompileAdvice<T, AdviceType.CLASS>) => {\n            ctxt.advice = advice;\n            ctor = advice(ctxt as AdviceContext<T, AdviceType.CLASS>) as any;\n        });\n        delete ctxt.advice;\n        return (ctxt.target.proto.constructor = ctor ?? ctxt.target.proto.constructor);\n    }\n\n    preAround(ctxt: MutableAdviceContext<T, AdviceType.CLASS>) {\n        // original ctor invocation will discard any changes done to instance before, so accessing ctxt.instance is forbidden\n        this.originalInstance = ctxt.instance;\n        ctxt.instance = null;\n    }\n\n    around(\n        ctxt: Mutable<AroundContext<T, AdviceType.CLASS>>,\n        advices: AroundAdvice<T, AdviceType.CLASS>[],\n        joinpoint: JoinPoint<T>,\n    ): (args?: any[]) => any {\n        advices.reverse().forEach((advice) => {\n            const originalJp = joinpoint;\n            const nextJp = _JoinpointFactory.create(advice, ctxt, (...args: unknown[]) => originalJp(args));\n            joinpoint = (args: any[]) => {\n                ctxt.joinpoint = nextJp;\n                ctxt.args = args;\n                ctxt.advice = advice;\n                return (ctxt.instance = advice(ctxt as any, nextJp, args) ?? ctxt.instance);\n            };\n        });\n\n        return joinpoint;\n    }\n\n    initialJoinpoint(ctxt: MutableAdviceContext<T, AdviceType.CLASS>, originalCtor: { new (...args: any[]): T }): void {\n        // We need to keep originalInstance as the instance, because of instanceof.\n        // Merge the new instance into originalInstance;\n        Object.assign(this.originalInstance, new originalCtor(...ctxt.args) ?? this.originalInstance);\n        ctxt.instance = this.originalInstance;\n    }\n\n    afterReturn<T>(\n        ctxt: MutableAdviceContext<T, AdviceType.CLASS>,\n        advices: AfterReturnAdvice<T, AdviceType.CLASS>[],\n    ): T {\n        let newInstance = ctxt.instance;\n\n        advices.forEach((advice) => {\n            ctxt.value = ctxt.instance;\n            ctxt.advice = advice;\n            newInstance = advice(ctxt, ctxt.value);\n            if (!isUndefined(newInstance)) {\n                ctxt.instance = newInstance;\n            }\n            delete ctxt.advice;\n        });\n\n        return ctxt.instance;\n    }\n\n    preAfterThrow(ctxt: MutableAdviceContext<T, AdviceType.CLASS>): void {\n        // as of ES6 classes, 'this' is no more available after ctor thrown.\n        // replace 'this' with partial this\n        ctxt.instance = this.originalInstance;\n    }\n\n    afterThrow(ctxt: MutableAdviceContext<T, AdviceType.CLASS>, advices: AfterThrowAdvice<T, AdviceType.CLASS>[]): T {\n        if (!advices.length) {\n            // pass-trough errors by default\n            throw ctxt.error;\n        } else {\n            let newInstance = ctxt.instance;\n            advices.forEach((advice) => {\n                ctxt.advice = advice;\n                newInstance = advice(ctxt, ctxt.error);\n                if (!isUndefined(newInstance)) {\n                    ctxt.instance = newInstance;\n                }\n                delete ctxt.advice;\n            });\n            return ctxt.instance;\n        }\n    }\n\n    finalize(\n        ctxt: MutableAdviceContext<T, AdviceType.CLASS>,\n        joinpoint: (...args: any[]) => T,\n    ): new (...args: any[]) => T {\n        assert(!!ctxt.target?.proto);\n        const originalCtor = ctxt.target.proto.constructor;\n        const ctorName = originalCtor.name;\n\n        joinpoint = _defineFunctionProperties(\n            joinpoint,\n            ctorName,\n            `class ${ctorName}$$advised {}`,\n            originalCtor.toString.bind(originalCtor),\n        );\n        joinpoint.prototype = ctxt.target.proto;\n        joinpoint.prototype.constructor = joinpoint;\n\n        return joinpoint as any;\n    }\n}\n"],"names":[],"mappings":"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"}