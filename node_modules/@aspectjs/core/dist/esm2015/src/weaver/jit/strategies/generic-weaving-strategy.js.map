{"version":3,"file":"generic-weaving-strategy.js","sources":["../../../../../../src/weaver/jit/strategies/generic-weaving-strategy.ts"],"sourcesContent":["import {\n    _JoinpointFactory,\n    Advice,\n    AdviceContext,\n    AdviceError,\n    AdviceType,\n    AfterAdvice,\n    AfterReturnAdvice,\n    AfterThrowAdvice,\n    AfterThrowContext,\n    AnnotationType,\n    AroundAdvice,\n    BeforeAdvice,\n    CompileAdvice,\n    JoinPoint,\n    MutableAdviceContext,\n} from '@aspectjs/core/commons';\nimport { assert, isUndefined } from '@aspectjs/core/utils';\nimport { _WeavingStrategy } from '../../weaving-strategy';\n\n/**\n * @internal\n */\nexport abstract class _GenericWeavingStrategy<T, A extends AdviceType> implements _WeavingStrategy<T, A> {\n    after(ctxt: MutableAdviceContext<T, A>, advices: AfterAdvice<T, A>[]): void {\n        this._applyNonReturningAdvices(ctxt, advices);\n    }\n\n    afterReturn(ctxt: MutableAdviceContext<T, A>, advices: AfterReturnAdvice<T, A>[]): T {\n        ctxt.value = ctxt.value; // force key 'value' to be present\n\n        advices.forEach((advice) => {\n            ctxt.value = advice(ctxt, ctxt.value);\n        });\n\n        return ctxt.value as T;\n    }\n\n    afterThrow(ctxt: MutableAdviceContext<T, A>, advices: AfterThrowAdvice<T, A>[], allowReturn = true): any {\n        if (advices.length) {\n            ctxt.value = ctxt.value ?? undefined; // force key 'value' to be present\n            advices.forEach((advice: AfterThrowAdvice) => {\n                ctxt.advice = advice as any;\n                ctxt.value = advice(ctxt as AfterThrowContext<any, AdviceType>, ctxt.error);\n                delete ctxt.advice;\n                if (!allowReturn && !isUndefined(ctxt.value)) {\n                    throw new AdviceError(advice, `Returning from advice is not supported`);\n                }\n            });\n            return ctxt.value;\n        } else {\n            assert(!!ctxt.error);\n            // pass-trough errors by default\n            throw ctxt.error;\n        }\n    }\n\n    around(\n        ctxt: MutableAdviceContext<T, A>,\n        advices: AroundAdvice<T, A>[],\n        jp: JoinPoint<T>,\n        allowReturn = true,\n    ): JoinPoint<T> {\n        advices.reverse().forEach((advice) => {\n            const originalJp = jp;\n            const nextJp = _JoinpointFactory.create(advice, ctxt, (...args: unknown[]) => originalJp(args));\n            jp = (args: any[]) => {\n                ctxt.joinpoint = nextJp;\n                ctxt.args = args;\n                ctxt.advice = advice;\n                ctxt.value = advice(ctxt as any, nextJp, args);\n                if (ctxt.value !== undefined && !allowReturn) {\n                    throw new AdviceError(advice, `Returning from advice is not supported`);\n                }\n                return ctxt.value as T;\n            };\n        });\n\n        return jp;\n    }\n\n    before(ctxt: MutableAdviceContext<T, A>, advices: BeforeAdvice<T, A>[]): void {\n        this._applyNonReturningAdvices(ctxt, advices);\n    }\n\n    abstract compile(\n        ctxt: MutableAdviceContext<T, A>,\n        advices: CompileAdvice<T, AdviceType>[],\n    ): A extends AdviceType.CLASS ? { new (...args: any[]): T } : PropertyDescriptor;\n\n    abstract initialJoinpoint(\n        ctxt: MutableAdviceContext<T, A>,\n        originalSymbol: A extends AdviceType.CLASS ? { new (...args: any[]): T } : PropertyDescriptor,\n    ): void;\n\n    abstract finalize(\n        ctxt: MutableAdviceContext<T, A>,\n        joinpoint: (...args: any[]) => T,\n    ): A extends AnnotationType.CLASS ? { new (...args: any[]): T } : PropertyDescriptor;\n\n    protected _applyNonReturningAdvices(ctxt: MutableAdviceContext<any>, advices: Advice[]) {\n        advices.forEach((advice: AfterAdvice) => {\n            ctxt.advice = advice;\n            const retVal = advice(ctxt as AdviceContext);\n            delete ctxt.advice;\n            if (!isUndefined(retVal)) {\n                throw new AdviceError(advice, `Returning from advice is not supported`);\n            }\n        });\n    }\n}\n"],"names":[],"mappings":";;;AAoBA;;;MAGsB,uBAAuB;IACzC,KAAK,CAAC,IAAgC,EAAE,OAA4B;QAChE,IAAI,CAAC,yBAAyB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;KACjD;IAED,WAAW,CAAC,IAAgC,EAAE,OAAkC;QAC5E,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAExB,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM;YACnB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;SACzC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,KAAU,CAAC;KAC1B;IAED,UAAU,CAAC,IAAgC,EAAE,OAAiC,EAAE,WAAW,GAAG,IAAI;;QAC9F,IAAI,OAAO,CAAC,MAAM,EAAE;YAChB,IAAI,CAAC,KAAK,SAAG,IAAI,CAAC,KAAK,mCAAI,SAAS,CAAC;YACrC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAwB;gBACrC,IAAI,CAAC,MAAM,GAAG,MAAa,CAAC;gBAC5B,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,IAA0C,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC5E,OAAO,IAAI,CAAC,MAAM,CAAC;gBACnB,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;oBAC1C,MAAM,IAAI,WAAW,CAAC,MAAM,EAAE,wCAAwC,CAAC,CAAC;iBAC3E;aACJ,CAAC,CAAC;YACH,OAAO,IAAI,CAAC,KAAK,CAAC;SACrB;aAAM;YACH,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;YAErB,MAAM,IAAI,CAAC,KAAK,CAAC;SACpB;KACJ;IAED,MAAM,CACF,IAAgC,EAChC,OAA6B,EAC7B,EAAgB,EAChB,WAAW,GAAG,IAAI;QAElB,OAAO,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,MAAM;YAC7B,MAAM,UAAU,GAAG,EAAE,CAAC;YACtB,MAAM,MAAM,GAAG,iBAAiB,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,GAAG,IAAe,KAAK,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YAChG,EAAE,GAAG,CAAC,IAAW;gBACb,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;gBACxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACrB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,IAAW,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;gBAC/C,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,IAAI,CAAC,WAAW,EAAE;oBAC1C,MAAM,IAAI,WAAW,CAAC,MAAM,EAAE,wCAAwC,CAAC,CAAC;iBAC3E;gBACD,OAAO,IAAI,CAAC,KAAU,CAAC;aAC1B,CAAC;SACL,CAAC,CAAC;QAEH,OAAO,EAAE,CAAC;KACb;IAED,MAAM,CAAC,IAAgC,EAAE,OAA6B;QAClE,IAAI,CAAC,yBAAyB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;KACjD;IAiBS,yBAAyB,CAAC,IAA+B,EAAE,OAAiB;QAClF,OAAO,CAAC,OAAO,CAAC,CAAC,MAAmB;YAChC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,MAAM,MAAM,GAAG,MAAM,CAAC,IAAqB,CAAC,CAAC;YAC7C,OAAO,IAAI,CAAC,MAAM,CAAC;YACnB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;gBACtB,MAAM,IAAI,WAAW,CAAC,MAAM,EAAE,wCAAwC,CAAC,CAAC;aAC3E;SACJ,CAAC,CAAC;KACN;;;;;"}