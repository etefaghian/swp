{"version":3,"file":"annotation.factory.js","sources":["../../../../../../commons/src/annotation/factory/annotation.factory.ts"],"sourcesContent":["import { assert, isFunction } from '@aspectjs/core/utils';\nimport { AdviceType } from '../../advices/types';\nimport { _getWeaverContext } from '../../weaver';\nimport {\n    Annotation,\n    AnnotationRef,\n    AnnotationType,\n    ClassAnnotationStub,\n    Decorator,\n    MethodAnnotationStub,\n    ParameterAnnotationStub,\n    PropertyAnnotationStub,\n} from '../annotation.types';\nimport { AnnotationContext } from '../context/annotation.context';\nimport { AdviceTarget, AnnotationTarget } from '../target/annotation-target';\n\nlet generatedId = 0;\n\n/**\n * Factory to create some {@link Annotation}.\n * @public\n */\nexport class AnnotationFactory {\n    private readonly _groupId: string;\n\n    constructor(groupId: string) {\n        this._groupId = groupId;\n    }\n\n    /**\n     * Create a ClassAnnotation.\n     *\n     * @param name - The annotation name.\n     * @param annotationStub - The annotation signature.\n     */\n    create<A extends ClassAnnotationStub>(name: string, annotationStub?: A): A & AnnotationRef;\n\n    /**\n     * Create a MethodAnnotation.\n     *\n     * @param name - The annotation name.\n     * @param annotationStub - The annotation signature.\n     */\n    create<A extends MethodAnnotationStub>(name: string, annotationStub?: A): A & AnnotationRef;\n\n    /**\n     * Create a PropertyAnnotationStub.\n     *\n     * @param name - The annotation name.\n     * @param annotationStub - The annotation signature.\n     */\n    create<A extends PropertyAnnotationStub>(name: string, annotationStub?: A): A & AnnotationRef;\n\n    /**\n     * Create a ParameterAnnotation.\n     *\n     * @param name - The annotation name.\n     * @param annotationStub - The annotation signature.\n     */\n\n    /**\n     * Create a ParameterAnnotation.\n     *\n     * @param name - The annotation name.\n     * @param annotationStub - The annotation signature.\n     */\n    create<A extends ParameterAnnotationStub>(name: string, annotationStub?: A): A & AnnotationRef;\n\n    /**\n     * Create a ClassAnnotation.\n     *\n     * @param annotationStub - The annotation signature.\n     */\n    create<A extends ClassAnnotationStub>(annotationStub?: A): A & AnnotationRef;\n\n    /**\n     * Create a MethodAnnotation.\n     *\n     * @param annotationStub - The annotation signature.\n     */\n    create<A extends MethodAnnotationStub>(annotationStub?: A): A & AnnotationRef;\n\n    /**\n     * Create a PropertyAnnotation.\n     *\n     * @param annotationStub - The annotation signature.\n     */\n    create<A extends PropertyAnnotationStub>(annotationStub?: A): A & AnnotationRef;\n\n    /**\n     * Create a ParameterAnnotation.\n     *\n     * @param annotationStub - The annotation signature.\n     */\n    create<A extends ParameterAnnotationStub>(annotationStub?: A): A & AnnotationRef;\n\n    create<A extends Annotation<AdviceType>>(name?: string | A, annotationStub?: A): A & AnnotationRef {\n        const groupId = this._groupId;\n\n        if (isFunction(name)) {\n            annotationStub = name as A;\n            name = annotationStub.name;\n        }\n        if (!annotationStub) {\n            annotationStub = function () {} as any;\n        }\n        if (!name) {\n            name = `anonymousAnnotation#${generatedId++}`;\n        }\n        // create the annotation (ie: decorator provider)\n        const annotation = _createAnnotation(\n            name as string,\n            groupId,\n            annotationStub,\n            function (...annotationArgs: any[]): Decorator {\n                return _createBootstrapDecorator(annotation as any, annotationStub, annotationArgs);\n            },\n        );\n\n        return annotation;\n    }\n}\n\nfunction _createAnnotation<A extends Annotation<AdviceType>, D extends Decorator>(\n    name: string,\n    groupId: string,\n    annotationStub: A,\n    fn: Function & D,\n): A {\n    assert(typeof fn === 'function');\n\n    // ensure annotation has a name.\n    annotationStub = annotationStub ?? (function () {} as A);\n\n    const annotationRef = new AnnotationRef(groupId, name);\n    const annotation = (fn as any) as AnnotationRef & A;\n    Object.defineProperties(annotation, Object.getOwnPropertyDescriptors(annotationStub));\n    Object.defineProperties(annotation, Object.getOwnPropertyDescriptors(annotationRef));\n    assert(Object.getOwnPropertySymbols(annotation).indexOf(Symbol.toPrimitive) >= 0);\n\n    return annotation;\n}\n\nfunction _createBootstrapDecorator<A extends AdviceType, S extends Annotation<AdviceType>>(\n    annotation: Annotation<A>,\n    annotationStub: S,\n    annotationArgs: any[],\n): Decorator {\n    return function (...targetArgs: any[]): Function | PropertyDescriptor | void {\n        // eslint-disable-next-line prefer-spread\n        annotationStub(...annotationArgs)?.apply(null, targetArgs);\n\n        // assert the weaver is loaded before invoking the underlying decorator\n        const weaverContext = _getWeaverContext();\n        if (!weaverContext) {\n            throw new Error(\n                `Cannot invoke annotation ${annotation.name ?? ''} before \"setWeaverContext()\" has been called`,\n            );\n        }\n\n        const target = _getWeaverContext().annotations.targetFactory.of(targetArgs) as AnnotationTarget<any, A>;\n        const annotationContext = new AnnotationContextImpl(target, annotationArgs, annotation);\n        weaverContext.annotations.registry.register(annotationContext);\n\n        const enhanced = weaverContext.getWeaver().enhance(target);\n        if (target.type === AnnotationType.CLASS) {\n            Object.defineProperties(enhanced, Object.getOwnPropertyDescriptors(targetArgs[0]));\n        }\n        return enhanced;\n    };\n}\n\nclass AnnotationContextImpl<T, D extends AdviceType> extends AnnotationContext<T, D> {\n    constructor(public readonly target: AdviceTarget<T, D>, public readonly args: any[], annotation: AnnotationRef) {\n        super(annotation.groupId, annotation.name);\n    }\n}\n"],"names":[],"mappings":"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"}