{"version":3,"file":"pointcut.js","sources":["../../../../../commons/src/types/pointcut.ts"],"sourcesContent":["import { WeavingError } from '../weaver/errors';\nimport {\n    Annotation,\n    AnnotationRef,\n    AnnotationType,\n    ClassAnnotation,\n    MethodAnnotation,\n    ParameterAnnotation,\n    PropertyAnnotation,\n} from '../annotation/annotation.types';\nimport { AdviceType } from '../advices/types';\nimport { assert } from '@aspectjs/core/utils';\n\n/**\n * @public\n */\nexport class PointcutExpression {\n    private readonly _name = '*'; // TODO\n    private readonly _expr: string;\n\n    static of<T extends AdviceType>(type: T, annotation: AnnotationRef) {\n        return AnnotationPointcutExpressionBuilders[type].withAnnotations(annotation as any);\n    }\n    constructor(private _label: string, private _annotations: AnnotationRef[] = []) {\n        this._expr = _trimSpaces(`${this._label} ${this._annotations.map((a) => `@${a.ref}`).join(',')} ${this._name}`);\n    }\n    toString(): string {\n        return this._expr;\n    }\n}\n\n/**\n * @public\n */\nexport class AnnotationPointcutExpressionBuilder<A extends Annotation> {\n    constructor(private _label: string) {}\n\n    withAnnotations(...annotation: Annotation[]): PointcutExpression {\n        return new PointcutExpression(this._label, annotation);\n    }\n}\n\n/**\n * @public\n */\nexport class PropertyAnnotationPointcutExpressionBuilder {\n    readonly setter = new AnnotationPointcutExpressionBuilder<ParameterAnnotation>('property#set');\n\n    withAnnotations(...annotation: PropertyAnnotation[]): PointcutExpression {\n        return new PointcutExpression('property#get', annotation);\n    }\n}\n\n/**\n * @public\n */\nexport interface PointcutExpressionBuilder {\n    readonly class: AnnotationPointcutExpressionBuilder<ClassAnnotation>;\n    readonly property: PropertyAnnotationPointcutExpressionBuilder;\n    readonly method: AnnotationPointcutExpressionBuilder<MethodAnnotation>;\n    readonly parameter: AnnotationPointcutExpressionBuilder<ParameterAnnotation>;\n}\n\nconst AnnotationPointcutExpressionBuilders = {\n    [AnnotationType.CLASS]: new AnnotationPointcutExpressionBuilder<ClassAnnotation>('class'),\n    [AnnotationType.METHOD]: new AnnotationPointcutExpressionBuilder<MethodAnnotation>('method'),\n    [AnnotationType.PARAMETER]: new AnnotationPointcutExpressionBuilder<MethodAnnotation>('parameter'),\n    [AnnotationType.PROPERTY]: new PropertyAnnotationPointcutExpressionBuilder(),\n};\n/**\n * @public\n */\nexport const on: PointcutExpressionBuilder = {\n    class: AnnotationPointcutExpressionBuilders[AnnotationType.CLASS],\n    method: AnnotationPointcutExpressionBuilders[AnnotationType.METHOD],\n    parameter: AnnotationPointcutExpressionBuilders[AnnotationType.PARAMETER],\n    property: AnnotationPointcutExpressionBuilders[AnnotationType.PROPERTY],\n};\n\n/**\n * @public\n */\nexport enum PointcutPhase {\n    COMPILE = 'Compile',\n    AROUND = 'Around',\n    BEFORE = 'Before',\n    AFTERRETURN = 'AfterReturn',\n    AFTER = 'After',\n    AFTERTHROW = 'AfterThrow',\n}\n\n/**\n * @public\n */\nexport interface Pointcut<A extends AdviceType = any> {\n    readonly type: A;\n    readonly annotation: AnnotationRef;\n    readonly name: string;\n    readonly phase: PointcutPhase;\n    readonly ref: string;\n}\n\n/**\n * @public\n */\nexport namespace Pointcut {\n    const POINTCUT_REGEXPS = {\n        [AdviceType.CLASS]: new RegExp('class(?:\\\\s+\\\\@(?<annotation>\\\\S+?:\\\\S+))?(?:\\\\s+(?<name>\\\\S+?))\\\\s*'),\n        [AdviceType.PROPERTY]: new RegExp(\n            'property#(?:get|set)(?:\\\\s+\\\\@(?<annotation>\\\\S+?:\\\\S+))?(?:\\\\s+(?<name>\\\\S+?))\\\\s*',\n        ),\n        [AdviceType.METHOD]: new RegExp('method(?:\\\\s+\\\\@(?<annotation>\\\\S+?:\\\\S+))?(?:\\\\s+(?<name>\\\\S+?))\\\\s*'),\n        [AdviceType.PARAMETER]: new RegExp('parameter(?:\\\\s+\\\\@(?<annotation>\\\\S+?:\\\\S+))?(?:\\\\s+(?<name>\\\\S+?))\\\\s*'),\n    };\n\n    export function of(phase: PointcutPhase, exp: PointcutExpression | string): Pointcut {\n        const ref = exp.toString();\n\n        let pointcut: Pointcut;\n\n        for (const entry of Object.entries(POINTCUT_REGEXPS)) {\n            const [type, regex] = entry;\n            const match = regex.exec(ref);\n\n            if (match?.groups.name) {\n                assert(!!match.groups.annotation, 'only annotation pointcuts are supported');\n                pointcut = {\n                    type: type as AdviceType,\n                    phase,\n                    annotation: new AnnotationRef(match.groups.annotation),\n                    name: match.groups.name,\n                    ref,\n                };\n\n                Reflect.defineProperty(pointcut, Symbol.toPrimitive, {\n                    value: () => `${phase}(${ref})`,\n                });\n\n                return pointcut;\n            }\n        }\n\n        throw new WeavingError(`expression ${ref} not recognized as valid pointcut expression`);\n    }\n}\n\n/**\n * @public\n */\nexport interface CompilePointcut<A extends AdviceType = any> extends Pointcut<A> {\n    phase: PointcutPhase.COMPILE;\n}\n/**\n * @public\n */\nexport interface AroundPointcut<A extends AdviceType = any> extends Pointcut<A> {\n    phase: PointcutPhase.AROUND;\n}\n/**\n * @public\n */\nexport interface BeforePointcut<A extends AdviceType = any> extends Pointcut<A> {\n    phase: PointcutPhase.BEFORE;\n}\n/**\n * @public\n */\nexport interface AfterReturnPointcut<A extends AdviceType = any> extends Pointcut<A> {\n    phase: PointcutPhase.AFTERRETURN;\n}\n/**\n * @public\n */\nexport interface AfterPointcut<A extends AdviceType = any> extends Pointcut<A> {\n    phase: PointcutPhase.AFTER;\n}\n/**\n * @public\n */\nexport interface AfterThrowPointcut<A extends AdviceType = any> extends Pointcut<A> {\n    phase: PointcutPhase.AFTERTHROW;\n}\n\nfunction _trimSpaces(s: string) {\n    return s.replace(/\\s+/, ' ');\n}\n"],"names":["AdviceType"],"mappings":"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"}